service: notes-crud-api
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs20.x
  region: ap-south-1
  stage: ${opt:stage, 'dev'}
  # iam:
  #   role:
  #     statements:
  #       - Effect: "Allow"
  #         Resource: !GetAtt notesTable.Arn
  #         Action: dynamodb:PutItem
  #       - Effect: "Allow"
  #         Resource: !GetAtt notesTable.Arn
  #         Action: dynamodb:UpdateItem
  environment:
    # NOTES_TABLE_NAME: notes
    # NOTES_TABLE_NAME: !Ref notesTable
    NOTES_TABLE_NAME: ${self:resources.Resources.notesTable.Properties.TableName}

plugins:
  - serverless-iam-roles-per-function

functions:
  createNote:
    handler: handler.createNote
    iamRoleStatements:
      - Effect: "Allow"
        # Resource: !GetAtt notesTable.Arn
        Resource:
        Fn::GetAtt:
          - notesTable
          - Arn
        Action: dynamodb:PutItem
    events:
      - http:
          method: post
          path: notes

  updateNote:
    handler: handler.updateNote
    iamRoleStatements:
      - Effect: "Allow"
        Resource:
        Fn::GetAtt:
          - notesTable
          - Arn
        Action: dynamodb:UpdateItem
    events:
      - http:
          method: put
          path: notes/{id}

  deleteNote:
    handler: handler.deleteNote
    iamRoleStatements:
      - Effect: "Allow"
        Resource:
        Fn::GetAtt:
          - notesTable
          - Arn
        Action: dynamodb:DeleteItem
    events:
      - http:
          method: delete
          path: notes/{id}

  getAllNotes:
    handler: handler.getAllNotes
    iamRoleStatements:
      - Effect: "Allow"
        Resource:
        Fn::GetAtt:
          - notesTable
          - Arn
        Action: dynamodb:Scan
    events:
      - http:
          method: get
          path: notes

  getNoteById:
    handler: handler.getNoteById
    iamRoleStatements:
      - Effect: "Allow"
        Resource:
        Fn::GetAtt:
          - notesTable
          - Arn
        Action: dynamodb:GetItem
    events:
      - http:
          method: get
          path: notes/{id}

resources:
  Resources:
    notesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        TableName: notes
        KeySchema:
          - AttributeName: notesId
            KeyType: HASH # partition key
          # - AttributeName: updatedAt
          #   KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: notesId
            AttributeType: S # String
